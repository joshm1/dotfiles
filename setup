#!/bin/bash

git submodule update --init

# macOS config
defaults write com.apple.finder AppleShowAllFiles YES.

# link dotfiles
DOTFILES="$HOME/.dotfiles"
[ -d $DOTFILES ] || ln -sf $HOME/projects/joshm1/dotfiles $DOTFILES

ln -s $DOTFILES/git/gitconfig $HOME/.gitconfig
ln -s $DOTFILES/git/gitignore $HOME/.gitignore

ln -s $DOTFILES/ruby/gemrc $HOME/.gemrc

mkdir -p $HOME/.config
ln -s $DOTFILES/nvim $HOME/.config/nvim
ln -s $DOTFILES/nvim $HOME/.nvim
ln -s $DOTFILES/nvim/init.vim $HOME/.nvimrc
ln -s $DOTFILES/vimrc $HOME/.vimrc
ln -s $DOTFILES/vim $HOME/.vim

ln -s $DOTFILES/zsh/.zshrc $HOME/.zshrc
ln -s $DOTFILES/zsh/oh-my-zsh $HOME/.oh-my-zsh

# homebrew
ln -s $DOTFILES/homebrew/Brewfile ~/Brewfile
if [[ ! -f $DOTFILES/homebrew/.installed ]]; then
  brew tap homebrew/bundle
  brew bundle
  echo $(date) >> $DOTFILES/homebrew/.installed
fi

# rbenv: set global ruby version to 2.3.1 and install neovim gem
if ! rbenv versions | grep 2.3.1 >/dev/null; then
  rbenv global 2.3.1
  gem install bundler neovim
fi

# python3
if ! pyenv versions | grep 2.7 >/dev/null; then pyenv install 2.7; fi
if ! pyenv versions | grep 3.6.0 >/dev/null; then pyenv install 3.6.0; fi

# setup python environments for neovim
if [ ! -d ~/.pyenv/versions/neovim2 ]; then
  pyenv virtualenv 2.7 neovim2
  pyenv activate neovim2
  pip install neovim
fi

if [ ! -d ~/.pyenv/versions/neovim3 ]; then
  pyenv virtualenv 3.6 neovim3
  pyenv activate neovim3
  pip install neovim
  pip install flake8
  ln -s `pyenv which flake8` ~/bin/flake8
fi

# fzf: install useful keybindings and fuzzy completion
[[ ! -f ~/.fzf.zsh ]] && /usr/local/opt/fzf/install

# nvmrc
[ ! -d ~/.nvm ] && curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash

# private config files should be in Dropbox
if [[ -d $HOME/Dropbox ]]; then
  last_dir=$PWD
  cd $HOME/Dropbox/dotfiles
  find projects -type f -exec ln -s ~/Dropbox/dotfiles/{} ~/{} ";"
  cd $last_dir

  ln -sf $HOME/Dropbox/dotfiles/.zsh_history $HOME/.zsh_history
  ln -sf $HOME/Dropbox/dotfiles/.node_repl_history $HOME
  ln -sf $HOME/Dropbox/dotfiles/.python_history $HOME
  ln -sf $HOME/Dropbox/dotfiles/.psql_history $HOME
  ln -sf $HOME/Dropbox/dotfiles/.pry_history $HOME

  ln -s $HOME/Dropbox/dotfiles/.npmrc $HOME/.npmrc
  ln -s $HOME/Dropbox/dotfiles/.warprc $HOME/.warprc
  ln -s $HOME/Dropbox/dotfiles/.aws $HOME/.aws
  ln -s $HOME/Dropbox/dotfiles/.ssh $HOME/.ssh
  ln -s $HOME/Dropbox/dotfiles/.docker $HOME/.docker
  ln -s $HOME/Dropbox/dotfiles/.kube $HOME/.kube
  ln -s $HOME/Dropbox/dotfiles/bin $HOME
  ln -s $HOME/Dropbox/dotfiles/.atom $HOME

  echo "Adjusting permissions on secret files..."
  chmod 0600 $HOME/Dropbox/dotfiles/.docker/config.json
  find $HOME/Dropbox/dotfiles/.aws -exec chmod go-rwx {} ";"
  find $HOME/Dropbox/dotfiles/.ssh -type f -exec chmod 0600 {} ";"
  find $HOME/Dropbox/dotfiles/.ssh -type d -exec chmod 0700 {} ";"
  find $HOME/Dropbox/dotfiles/.kube -exec chmod go-rwx {} ";"
  find $HOME/Dropbox/dotfiles/bin -exec chmod go-rwx {} ";"

  sublime_user_dir="$HOME/Library/Application Support/Sublime Text 3/Packages/User"
  if file -h "$sublime_user_dir" | grep symbolic >/dev/null 2>&1; then
    echo "$sublime_user_dir is already a symbolic link"
  else
    rm -rf "$sublime_user_dir"
    ln -s $HOME/Dropbox/Apps/SublimeText3/User "$sublime_user_dir"
  fi
else
  echo "!!! Install Dropbox to link more dotfiles !!!"
fi

if psql -U postgres postgres -c 'SELECT 1;' >/dev/null 2>&1; then
  echo "postgres ROLE already exists"
else
  createuser --superuser --createrole --login --no-password postgres
fi

# install pow (pow.cx)
if [ -d ~/Library/Application\ Support/Pow ]; then
  echo "pow.cx is already installed"
else
  curl get.pow.cx | sh
fi

# create symlinks my projects in ~/.pow
bash ~/Dropbox/dotfiles/setup/create-pow-links

# clone oh-my-zsh - do not run installer because our .zshrc already has includes the oh-my-zsh config
[[ ! -d ~/.oh-my-zsh ]] && \
  git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
